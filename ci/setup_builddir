#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2017-2024 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel
#
# Description: additional builddir setup
#
###############################################################################
set -e
set -C # noclobber

# TRAP SIGNALS
trap 'error_abort $LINENO' ERR

function error_abort () {
	echo "error at $1"
}

readonly SCRIPTPATH=$(dirname "$(readlink -f "${0}")")
readonly SCRIPT="$(basename "${0}")"

. "${SCRIPTPATH}/utils"

##############
# handle different type of licenses and cope with CI build setup
# $1        - EULA_TYPE [NXP, FSL, TI, QT6]
# $2 ... $n - names of LICENSE files needed to accept
#
# - check for ACCEPT_${EULA_TYPE}_EULA in [local,auto].conf
# - check for ${EULA} in env
# if not set, show LICENSE files given with a preface depending on ${EULA_TYPE}
# and query for acception. If accepted, set ACCEPT_${EULA_TYPE}_EULA in local.conf
# Additionally add 'NXP-EULA-v24' to the list of enabled licenses if ${EULA_TYPE}
# is 'NXP''
##############
handle_eula() {
	local EULA_TYPE="${1}"
	shift
	local EULA_FILES="${@}"
	# Handle EULA setting
	local EULA_ACCEPTED=

	if grep -q "^\s*ACCEPT_${EULA_TYPE}_EULA\s*=\s*[\"'\'']..*[\"'\'']" conf/local.conf; then
		EULA_ACCEPTED=1
	fi
	if grep -q "^\s*ACCEPT_${EULA_TYPE}_EULA\s*=\s*[\"'\'']..*[\"'\'']" conf/auto.conf; then
		EULA_ACCEPTED=1
	fi

	if [ -z "${EULA_ACCEPTED}" ] && [ -n "${EULA}" ]; then
		# The EULA is not set as accepted in [local,auto].conf, but the EULA
		# variable is set in the environment, so we just configure
		# ACCEPT_${EULA_TYPE}_EULA in local.conf according to $EULA.
		echo "ACCEPT_${EULA_TYPE}_EULA = \"${EULA}\"" >> conf/local.conf
	elif [ -n "${EULA_ACCEPTED}" ]; then
		# The EULA has been accepted once, so ACCEPT_${EULA_TYPE}_EULA is set
		# in local.conf.  No need to do anything.
		:
	else
		# The EULA is not set as accepted in local.conf / auto.conf,
		# and EULA is not set in the environment, so we need to ask user
		# if he/she accepts the EULA:

		case ${EULA_TYPE} in
			FSL|NXP)
cat <<EOF
Some BSPs depend on libraries and packages which are covered by NXP's
End User License Agreement (EULA). To have the right to use these binaries in
your images, you need to read and accept the following...
EOF
				;;
			TI)
cat <<EOF
Some BSPs depend on libraries and packages which are covered by TI's licenses
(TI-TFL and TI-TSPA). To have the right to use these software in your images,
you need to read and accept the following...
EOF
				;;
			QT6)
cat <<EOF
The BSP configuration includes meta-qt6. This BSP is configured to build the
Open Source version of Qt6. Therefore you need to read and accept the following ...
EOF
				;;
		esac

		sleep 4

		more -d ${EULA_FILES}
		echo
		REPLY=
		while [ -z "${REPLY}" ]; do
			echo -n "Do you accept the EULA you just read? (y/n)"
			read -r REPLY
			case "${REPLY}" in
			y|Y)
				echo "EULA has been accepted."
				echo "ACCEPT_${EULA_TYPE}_EULA = \"1\"" >> conf/local.conf
				if [ ${EULA_TYPE} == "QT6" ]; then
					echo "Defaulting to Qt6 LGPL-3.0-only license: https://doc.qt.io/qt-6/lgpl.html"
					echo "QT_EDITION = \"opensource\"" >> conf/local.conf
				fi
				;;
			n|N)
				echo "EULA has not been accepted."
				;;
			*)
				REPLY=
				;;
			esac
		done
	fi
}

##############
# handle licenses that must be accepted
# $1        - BSPROOT
##############
handle_licenses() {
	local BSPROOT="${1}"

	# call handle_eula for meta-freescale is in conf/bblayers.conf
	# otherwise call it for meta-tq
	if grep -q "meta-freescale" conf/bblayers.conf; then
		handle_eula FSL "${BSPROOT}/sources/meta-freescale/EULA"
	else
		handle_eula NXP "${BSPROOT}/sources/meta-tq/meta-tq/NXP-EULA"
	fi

	if grep -q "meta-ti" conf/bblayers.conf; then
		handle_eula TI "${BSPROOT}/sources/meta-ti/meta-ti-bsp/licenses/TI-TFL ${BSPROOT}/sources/meta-ti/meta-ti-bsp/licenses/TI-TSPA"
	fi

	if grep -q "meta-qt6" conf/bblayers.conf; then
		handle_eula QT6 "${BSPROOT}/sources/meta-qt6/licenses/Qt-GPL-exception-1.0"
	fi
}

##############
# setup conf dir
# copy / link files from TEMPLATECONF dir
# $1        - TEMPLATECONF dir
##############
setup_confdir() {
	local TEMPLATECONF="${1}"

	mv conf/local.conf conf/local.conf.sample

	# Generate the local.conf based on the defaults
	grep -v '^#\|^$' "conf/local.conf.sample" > "conf/local.conf"

	echo "link auto.conf templates from ${TEMPLATECONF} to ./conf/ ..."
	FILES=$(find "${TEMPLATECONF}" -maxdepth 1 -type f,l -name "auto.conf*")
	for f in ${FILES}; do
		ln -s "${f}" "conf/$(basename "${f}")"
	done
	# optionally generate an auto.conf file
	do_create_auto_conf

	# check for site.conf and create link if available
	if [ -e "${HOME}/.oe/site.conf" ]; then
		ln -s "${HOME}/.oe/site.conf" conf
	elif [ -e "${HOME}/.yocto/site.conf" ]; then
		ln -s "${HOME}/.yocto/site.conf" conf
	fi

	return 0
}

##############
# set some defaults in local.conf file
# $1        - MACHINE
# $2        - DISTRO
##############
patch_localconf() {
	MACHINE=${1}
	DISTRO=${2}

	# Change settings according environment
	assign_or_replace MACHINE ${MACHINE} "??=" conf/local.conf
	assign_or_replace DISTRO ${DISTRO} "?=" conf/local.conf
}

default_machine () {
	local CONFIG=${1}
	local CONFIG_MACHINES
	local DEFAULT_MACHINE
	CONFIG_MACHINES=$(get_machines ${DEFAULT_BUILD_CONFIG} ${CONFIG})
	DEFAULT_MACHINE=$(echo ${CONFIG_MACHINES} | awk '{ print $1 }')

	echo "${DEFAULT_MACHINE}"
}

main() {
	if [ "${#}" -lt 1 ]; then
		echo "${SCRIPT}: Error: no action given" >&2
		exit 1
	fi

	case "${1}" in
		handle_licenses )
			shift
			handle_licenses "${@}"
			;;
		localconf_defaults )
			shift
			patch_localconf "${@}"
			;;
		confdir_setup )
			shift
			setup_confdir "${@}"
			;;
		default_machine )
			shift
			default_machine "${@}"
			;;
		* ) # unsupported
			echo "${SCRIPT}: Error: Unsupported action $1" >&2
			exit 1
			;;	esac
}

main "${@}"
