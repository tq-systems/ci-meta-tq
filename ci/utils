#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2021-2023 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel, Martin Schmiedel
#
# Description: shared utils for buildscripts
#
###############################################################################

####
# func:   __print
# brief:  print messags
# param:  $1 - message type (info, err, dbg)
#         $2 - message
# return: ---
####
function __print () {
	local type="${1}"
	local msg="${2}"

	case ${type} in
		info)
			echo "${SCRIPT} [INFO]: ${msg}"
			;;
		err)
			echo "${SCRIPT} [ERROR]: ${msg}" >&2
			;;
		dbg)
			if [ "${DEBUG}" = "on" ]
			then
				echo "${SCRIPT} [DEBUG]: ${msg}"
			fi
			;;
	esac
}

function debug () {
	__print dbg "$@"
}

function info () {
	__print info "$@"
}

function error () {
	__print err "$@"
}

function error_out () {
	echo "FATAL: $1" >&2
	exit 1
}

##############
# replace assigned variable or assign variable if not already assigned
# $1        - variable to assign
# $2        - value for variable
# $3        - assignment operator
# $4        - file to edit
#
# use sed to find and replace existing assignment or add assignment
# First the assignment of local vars ensures proper formatting so that it is
# possible to use also variables as expressions, so the finally alos assignments
# of this types could be made in the file to edit:
# "${VARNAME} = ${VALUE}"
# The somewhat complex sed expression uses hold and pattern space
# (see sed manual) to either replace a line starting with '${var} ' with
# '${var} ${op} ${val}' (first expression) or add such a line if no line starting
# with '${var} ' could be found in the file
##############
function assign_or_replace() {
	local var=${1////\\/}
	local val=${2////\\/}
	local op=${3////\\/}
	local infile=${4}

	sed --in-place "/^${var} /{h;s/.*/${var} ${op} \"${val}\"/};\${x;/^$/{s//${var} ${op} \"${val}\"/;H};x}" "${infile}"
}

####
# func:   is_gnu_grep
# brief:  checks for GNU grep (needed for perl regex with Negative Lookahead)
####
function is_gnu_grep() {
	if which grep >> /dev/null; then
		if grep --version | grep GNU >> /dev/null; then
			return
		fi
	fi

	error "need gnu grep"

	return 1
}

####
# func:   get_md5sum
# brief:  calculate md5sum for all files directory
# param:  $1 - directory
# return: file containing md5sum of files
####
function get_md5sum () {
	local mypwd
	local directory=${1}
	mypwd="$(pwd)"

	if [ -d "${directory}" ]; then
		cd "${directory}" || return
		local files
		files=$(find . -maxdepth 1 -type f)

		for file in ${files}; do
			if ! md5sum "${file}"; then
				err "md5sum for ${file}"
			fi
		done
	fi
	
	cd "${mypwd}" || return
}

####
# func:   do_create_auto_conf
# brief:  recreate the auto.conf based on template files
#         copy conf/auto.conf.sample to to conf/auto.conf and
#         optionally append conf/auto.conf.${1} to conf/auto.conf
# param:  $1 - [optional] template (ci/mirror)
# return: ---
####
function do_create_auto_conf () {
	local cwd
	cwd="$(pwd)"
	local templ=${1}

	rm -f "${cwd}/conf/auto.conf"
	cp "${cwd}/conf/auto.conf.sample" "${cwd}/conf/auto.conf"
	if ! [ -e "${cwd}/conf/auto.conf" ]; then
		error_out "missing auto.conf"
	fi
	if [ -n "${templ}" ]; then
		if [ -e "${cwd}/conf/auto.conf.${templ}" ]; then
			cat "${cwd}/conf/auto.conf.${templ}" >> "${cwd}/conf/auto.conf"
		fi
	fi
}

# to be used by scripts including this file
readonly DEFAULT_BUILD_CONFIG="build-config.json"

####
# func:   lookup_values_for_key
# brief:  return list of values extrcated from json file
# param:  $1 - file
# param:  $2 - filter
# param:  $3 - key name
# param:  $4 - key value
# return list of items
####
function lookup_values_for_key () {
	local fname=${1}
	local fexpr=${2}
	local key=${3}
	local val=${4}
	local aname=${5}
	local count
	local list
	local query="${fexpr} | select(.${key}==\"${val}\") | .${aname} | length"

	#debug "lookup_values_for_key: constructed $query"
	count=$(jq "${query}" "${fname}")
	#debug "lookup_values_for_key count=$count"

	if [ -z ${count} ] || [ "${count}" -le "0" ]; then
		error "no entries for ${aname} in ${fname}"
		return 5
	fi

	for n in $(seq 0 $((${count} - 1))); do
		query="${fexpr} | select(.${key}==\"${val}\") | .${aname}[$n]"
		# debug "lookup_values_for_key: constructed ${query}"
		list="${list} $(jq -r "${query}" "${fname}")"
	done

	echo "${list}"
}

function lookup_single_value_for_key () {
	local fname=${1}
	local fexpr=${2}
	local key=${3}
	local val=${4}
	local aname=${5}

	query="${fexpr} | select(.${key}==\"${val}\").${aname}"
	value="$(jq -r "${query}" "${fname}")"

	echo "${value}"
}

####
# func:   get_images_for_distro
# brief:  return list of images buildable by given distro
# param:  $1 - file
# param:  $2 - distro
# return list of images
####
function get_images_for_distro () {
	local fname=${1}
	local distro=${2}

	lookup_values_for_key "${fname}" ".distros[]" "name" "${distro}" "images"
}

####
# func:   get_distros_for_config
# brief:  return list of distros buildable by given config
# param:  $1 - file
# param:  $2 - config
# return list of distros
####
function get_distros_for_config () {
	local fname=${1}
	local config=${2}

	lookup_values_for_key "${fname}" ".configs[]" "name" "${config}" "distros"
}

####
# func:   get_groups_for_config
# brief:  return list of machine groups for given config
# param:  $1 - file
# param:  $2 - config
# return list of machine groups
####
function get_groups_for_config () {
	local fname=${1}
	local config=${2}
	local mgroups

	mgroups="$(lookup_values_for_key "${fname}" ".configs[]" "name" "${config}" "groups")"
	echo "${mgroups}"
}

####
# func:   get_machine_pattern_for_group
# brief:  return list of machine patterns for given machine group
# param:  $1 - file
# param:  $2 - group
# return list of machine groups
####
function get_machine_pattern_for_group () {
	local fname=${1}
	local group=${2}

	lookup_single_value_for_key "${fname}" ".machine_groups[]" "name" "${group}" "pattern"
}

function get_machine_pattern_for_config () {
	local fname=${1}
	local config=${2}
	local mgroups
	local mpattern=""

	mgroups="$(get_groups_for_config "${fname}" ${config})"
	for mg in ${mgroups}; do
		mpattern="${mpattern} $(get_machine_pattern_for_group ${fname} ${mg})"
	done

	echo ${mpattern}
}

function get_machines_in_workspace () {
	local fname=${1}
	local folder
	local machines

	folder=$(jq -r ".[\"yocto-machine-folder\"]" "${fname}")
	machines="$(ls -1 $(pwd)/${folder}/*.conf | sed s/\.conf//g | xargs -n1 basename)"
	# one per line
	for m in ${machines}; do
		echo ${m}
	done
}

function get_machines_for_pattern () {
	local fname=${1}
	local pattern=${2}
	local allmachines
	local machines=""
	local count="0";

	allmachines=$(get_machines_in_workspace "${fname}")
	machines=$(echo "${allmachines}" | grep --perl-regex "${pattern}" )
	
	echo ${machines}
}

function get_machines_for_config () {
	local fname=${1}
	local config=${2}
	local mpattern
	local machines=""

	mpattern=$(get_machine_pattern_for_config ${fname} ${config})
	for mp in ${mpattern}; do
		machines="${machines} $(get_machines_for_pattern "${fname}" "${mp}")"
	done

	echo ${machines}
}


####
# func:   get_configs_in_workspace
# brief:  return list of configs from json file for workspace
# param:  $1 - file
# return list configurations in workspace
####
get_configs_in_workspace () {
	local fname=${1}
	local configs

	configs=$(jq -r ".configs[].name" "${fname}")
	echo ${configs}
}

####
# func:   valid_config
# brief:  check if config is in list of supported configs
# param:  $1 - config file
# param:  $2 - config
####
function valid_config() {
	local fname=${1}
	local config=${2}
	local supported_configs

	supported_configs=$(get_configs_in_workspace "${fname}")
	echo ${supported_configs} | grep -wq "${config}"
}

####
# func:   get_images
# brief:  return image based on distro
# param:  $1 - config file
# param:  $2 - distro
# return: image
####
function get_images () {
	local fname=${1}
	local distro=${2}

	if [ -z "${LOCAL}" ] || [ -z "${IMAGE_LIST}" ]
	then
		local choosen_images

		choosen_images=$(get_images_for_distro "${fname}" "${distro}")
		echo "${choosen_images}"
	else
		echo "${IMAGE_LIST}"
	fi
}

####
# func:   get_machines
# brief:  return buildable machines for config
# param:  $1 - config file
# param:  $2 - config (imx/ls/ti/mainline)
# return: list of machines for given configuration
####
function get_machines () {
	local fname=${1}
	local config=${2}

	if ! valid_config "${fname}" "${config}"; then
		error "invalid config: ${config}"
		return 1
	fi

	if [ -z "${LOCAL}" ] || [ -z "${MACHINE_LIST}" ]
	then
		local choosen_machines
		choosen_machines=$(get_machines_for_config "${fname}" "${config}")
		echo "${choosen_machines}"
	else
		echo "${MACHINE_LIST}"
	fi

	return 0
}

####
# func:   get_distros
# brief:  return buildable distros for config
# param:  $1 - config file
# param:  $2 - config (imx/ls/ti/mainline)
# return: list of machines
####
function get_distros () {
	local fname=${1}
	local config=${2}

	if ! valid_config "${fname}" "${config}"; then
		error "invalid config: ${config}"
		return 1
	fi

	if [ -z "${LOCAL}" ] || [ -z "${DISTRO_LIST}" ]
	then
		local choosen_distros
		choosen_distros=$(get_distros_for_config "${fname}" "${config}")
		echo "${choosen_distros}"
	else
		echo "${DISTRO_LIST}"
	fi

	return 0
}
