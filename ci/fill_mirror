#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2021-2024 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel, Paul Gerber
#
# Description: build all machines in a layer with a given config
#
###############################################################################
set -e
set -C # noclobber

# TRAP SIGNALS
trap 'error_abort $LINENO' ERR

function error_abort () {
	echo "error at $1"
}

readonly SCRIPTNAME="${0}"
readonly SCRIPTPATH=$(dirname "$(readlink -f "${0}")")
readonly SCRIPT="$(basename "${0}")"

. "${SCRIPTPATH}/utils"

usage() {
	cat <<END
Usage:

${SCRIPTNAME} <build-dir> [template] [--dryrun] [--debug]

<build-dir>: specifies the build directory location (required)
[template]: template bblayers.conf to use
[-h|--help]: print this message
[--dryrun]: call bitbake in dry-run mode
[--debug]: print additional informations
[--mirror=<yes|no>]: en/disable copy to mirror, default yes
[--skipbitbake]: don't call bitbake

If the variable "LOCAL" is defined in environment of ${SCRIPT}, the
variables "DISTRO_LIST", "MACHINE_LIST" and "IMAGE_LIST" can be used
to define what is fetched. Otherwise the lists are calculated.
END
}

main () {
	local build_dir=""
	local config="mainline"
	local copy_mirror="yes"
	local debug="no"
	local distros=""
	local dryrun="no"
	local skipbitbake="no"
	local machines=""
	local pos_params=""
	local top_dir=""

	while (( "$#" )); do
		case "$1" in
		-h|--help )
			usage
			return 0
			;;
		--debug=* )
			debug=${1#*=}
			if [ "${debug}" = "yes" ]; then
				# To enable output from function 'debug' need to set variable
				# 'DEBUG' -  see sourced '${SCRIPTPATH}/utils'
				DEBUG="on"
			fi
			shift
			;;
		--dryrun=* )
			dryrun=${1#*=}
			shift
			;;
		--mirror=* )
			copy_mirror=${1#*=}
			shift
			;;
		--skipbitbake=* )
			skipbitbake=${1#*=}
			shift
			;;
		--*=|-*) # unsupported flags
			error_out "Error: Unsupported flag $1"
			exit 1
			;;
		*) # preserve positional arguments
			pos_params="$pos_params $1"
			shift
			;;
		esac
	done

	if ! is_gnu_grep; then
		return 1
	fi

	if [ "${dryrun}" = "yes" ]; then
		bitbake_args="--dry-run"
	fi

	if [ "${copy_mirror}" = "yes" ]; then
		if [ "${dryrun}" = "yes" ] || [ "${skipbitbake}" = "yes " ]; then
			info "Disabling copy to mirror in dry-run / skip-bitbake mode"
			copy_mirror="no"
		fi
	fi

	# set positional arguments in their proper place
	eval set -- "$pos_params"

	if [ $# -lt 1 ]
	then
		usage
		exit 1
	fi

	build_dir="${1}"
	if [ -n "${2}" ]
	then
		config=${2}
	fi

	top_dir="$(pwd)"
	distros="$(get_distros "${top_dir}/${DEFAULT_BUILD_CONFIG}" "${config}")"
	machines="$(get_machines "${top_dir}/${DEFAULT_BUILD_CONFIG}" "${config}")"

	debug "Machines to build: ${machines}"
	debug "Distros to build: ${distros}"

	for distro in ${distros}
	do
		local images

		# GENERAL
		images=$(get_images "${top_dir}/${DEFAULT_BUILD_CONFIG}" "${distro}")
		debug "Images to build: ${images}"

		# source the real setup workhorse
		export EULA="y"
		export DISTRO=${distro}
		export MACHINE
		MACHINE=$(echo ${machines} | awk '{ print $1 }')

		# clean conf, to enforce a really clean configuration and to enable
		# incremental changes in the config using our template dir
		rm -rf "${build_dir}_${distro}/conf"

		# although DISTRO and MACHINE are exported, setup-environment
		# uses these variable mainly to set default in local.conf
		# afterwards they can be set again to iterate over all buildable
		# machines
		if ! . ./setup-environment "${build_dir}_${distro}" "${config}"
		then
			error_out "sourcing setup-environment failed"
		fi

		info "build mirror"
		do_create_auto_conf "mirror"
		info "clean local dirs in $(pwd) ..."
		rm -rf ./cache ./tmp* ./sstate-cache

		# get DL_DIR to cleanup packages generated from git ...
		DL_DIR=$(bitbake-getvar -q --value DL_DIR)

		# if there is a .done file and / or a git2_*.tar.gz it seems the
		# fetcher does not rerun git to update the repo
		info "clean git2 tarballs from ${DL_DIR} ..."
		rm -f "${DL_DIR}/git2_*.tar.gz"
		rm -f "${DL_DIR}/git2_*.tar.gz.done"
		if ls -1 "${DL_DIR}/git2_*" 2>/dev/null
		then
			error_out "${DL_DIR} not clean, stop"
		fi

		for img in ${images}
		do
			# now force bitbake to do a --runall fetch for the image to generate
			for machine in ${machines}
			do
				# overwrite MACHINE
				export MACHINE=${machine}
				info "baking: ${machine} ${distro} ${img} with --runall=fetch"
				if [ "${skipbitbake}" = "no" ]
				then
					if ! bitbake ${bitbake_args} ${img} --runall=fetch -k
					then
						error_out "fetching (${img} for ${machine}) failed"
					fi
				fi
			done
		done

		if [ ${copy_mirror} = "yes" ]
		then
			local SOURCE_MIRROR_URL
			SOURCE_MIRROR_URL=$(bitbake-getvar -q --value SOURCE_MIRROR_URL)
			SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL#file://*}

			info "copy tarballs from ${DL_DIR} to ${SOURCE_MIRROR_URL} ..."
			files="$(find "${DL_DIR}" -maxdepth 1 -type f -not -name "*.done")"
			info "copy ${files}"
			for f in ${files}; do
				cp "${f}" "${SOURCE_MIRROR_URL}"
			done

			cwd="$(pwd)"
			cd "${DL_DIR}"
			files=$(find uninative -maxdepth 2 -type f -not -name "*.done")
			for f in ${files}; do
				dir=$(dirname "${f}")
				mkdir -p "${SOURCE_MIRROR_URL}/${dir}"
				cp "${f}" "${SOURCE_MIRROR_URL}/${dir}"
			done
		fi

		cd "${top_dir}"
	done
	cd "${cwd}"
}

main "${@}"
